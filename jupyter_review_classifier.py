#!/usr/bin/env python3
"""
üöÄ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–∑–º–µ—Ç–∫–∏ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è JupyterHub
–ü—Ä–æ—Å—Ç–∞—è –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –≤–µ—Ä—Å–∏—è –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã
"""

import json
import re
import requests
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from collections import Counter
from typing import Dict, List, Optional
from dataclasses import dataclass
import time
import subprocess
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
plt.style.use('default')
sns.set_palette("husl")

@dataclass
class ReviewAnnotation:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–∞"""
    category: str
    subcategory: str
    tags: List[str]
    confidence: float = 1.0

class JupyterReviewClassifier:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è Jupyter"""
    
    def __init__(self, model_name: str = "llama3.2:3b", base_url: str = "http://localhost:11434"):
        self.base_url = base_url
        self.model_name = model_name
        self.categories = {}
        self.subcategories = {}
        self.tags = set()
        self.category_examples = {}
        
        print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞...")
        self.load_existing_annotations()
        
    def check_ollama_status(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å Ollama"""
        try:
            response = requests.get(f"{self.base_url}/api/tags", timeout=5)
            if response.status_code == 200:
                models = response.json().get('models', [])
                model_names = [m['name'] for m in models]
                
                if self.model_name in model_names:
                    print(f"‚úÖ Ollama —Ä–∞–±–æ—Ç–∞–µ—Ç, –º–æ–¥–µ–ª—å {self.model_name} –¥–æ—Å—Ç—É–ø–Ω–∞")
                    return True
                else:
                    print(f"‚ùå –ú–æ–¥–µ–ª—å {self.model_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: {model_names}")
                    return False
            else:
                print(f"‚ùå Ollama –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ollama: {e}")
            return False
    
    def install_ollama_instructions(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Ollama"""
        print("\nüìù –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –£–°–¢–ê–ù–û–í–ö–ï OLLAMA:")
        print("=" * 50)
        print("1. –û—Ç–∫—Ä–æ–π—Ç–µ —Ç–µ—Ä–º–∏–Ω–∞–ª –≤ JupyterHub")
        print("2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("   curl -fsSL https://ollama.com/install.sh | sh")
        print("   export PATH='/usr/local/bin:$PATH'")
        print("   ollama serve &")
        print("   ollama pull llama3.2:3b")
        print("\n3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç notebook")
        print("=" * 50)
    
    def load_existing_annotations(self, filepath: str = "reviews.json"):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏"""
        try:
            with open(filepath, 'r', encoding='utf-8') as f:
                content = f.read()
            
            objects = re.findall(r'\{[^}]*\}', content, re.DOTALL)
            
            categories = []
            subcategories = []
            all_tags = []
            examples_by_category = {}
            
            for obj_str in objects:
                try:
                    obj = json.loads(obj_str)
                    if '–∫–∞—Ç–µ–≥–æ—Ä–∏—è' in obj and '–æ—Ç–∑—ã–≤' in obj:
                        category = obj['–∫–∞—Ç–µ–≥–æ—Ä–∏—è']
                        review_text = obj['–æ—Ç–∑—ã–≤']
                        
                        categories.append(category)
                        
                        if category not in examples_by_category:
                            examples_by_category[category] = []
                        
                        if len(examples_by_category[category]) < 2:
                            examples_by_category[category].append({
                                'review': review_text[:100] + '...' if len(review_text) > 100 else review_text,
                                'subcategory': obj.get('–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è', ''),
                                'tags': obj.get('—Ç–µ–≥–∏', [])
                            })
                    
                    if '–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è' in obj:
                        subcategories.append(obj['–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è'])
                    if '—Ç–µ–≥–∏' in obj:
                        all_tags.extend(obj['—Ç–µ–≥–∏'])
                except:
                    continue
            
            self.categories = dict(Counter(categories).most_common())
            self.subcategories = dict(Counter(subcategories).most_common())
            self.tags = set(all_tags)
            self.category_examples = examples_by_category
            
            print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(categories)} —Ä–∞–∑–º–µ—á–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤")
            print(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(self.categories)}")
            print(f"üìã –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(self.subcategories)}")
            print(f"üè∑Ô∏è –¢–µ–≥–æ–≤: {len(self.tags)}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π: {e}")
    
    def create_prompt(self, review_text: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        categories_list = "\n".join([f"- {cat}" for cat in list(self.categories.keys())[:5]])
        subcategories_list = "\n".join([f"- {subcat}" for subcat in list(self.subcategories.keys())[:10]])
        tags_list = ", ".join(sorted(list(self.tags))[:20])
        
        prompt = f"""–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –æ—Ç–∑—ã–≤–æ–≤ –æ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏ —Å–µ—Ä–≤–∏—Å–µ –¥–æ—Å—Ç–∞–≤–∫–∏.

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Ç–∑—ã–≤ –∏ –ø—Ä–∏—Å–≤–æ–π –µ–º—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —Ç–µ–≥–∏.

–ö–ê–¢–ï–ì–û–†–ò–ò:
{categories_list}

–ü–û–î–ö–ê–¢–ï–ì–û–†–ò–ò:
{subcategories_list}

–¢–ï–ì–ò:
{tags_list}

–û–¢–ó–´–í: "{review_text}"

–û—Ç–≤–µ—Ç—å –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{{
    "–∫–∞—Ç–µ–≥–æ—Ä–∏—è": "–Ω–∞–∑–≤–∞–Ω–∏–µ_–∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
    "–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è": "–Ω–∞–∑–≤–∞–Ω–∏–µ_–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
    "—Ç–µ–≥–∏": ["—Ç–µ–≥1", "—Ç–µ–≥2"]
}}"""
        
        return prompt
    
    def query_llm(self, prompt: str) -> Optional[str]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Ollama"""
        try:
            url = f"{self.base_url}/api/generate"
            payload = {
                "model": self.model_name,
                "prompt": prompt,
                "stream": False,
                "options": {
                    "temperature": 0.1,
                    "top_p": 0.9,
                    "num_predict": 200
                }
            }
            
            response = requests.post(url, json=payload, timeout=60)
            response.raise_for_status()
            
            result = response.json()
            return result.get('response', '').strip()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM: {e}")
            return None
    
    def parse_response(self, response: str) -> Optional[ReviewAnnotation]:
        """–ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç LLM"""
        try:
            json_match = re.search(r'\{.*\}', response, re.DOTALL)
            if not json_match:
                return None
            
            data = json.loads(json_match.group())
            
            category = data.get('–∫–∞—Ç–µ–≥–æ—Ä–∏—è', '').strip()
            subcategory = data.get('–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è', '').strip()
            tags = data.get('—Ç–µ–≥–∏', [])
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            if category not in self.categories:
                category = "–û–±—â–∏–µ –∏ –ø—Ä–æ—á–∏–µ –æ—Ç–∑—ã–≤—ã"
            
            if subcategory not in self.subcategories:
                subcategory = "–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ–±—â–∏–π –æ—Ç–∑—ã–≤"
            
            valid_tags = [tag for tag in tags if tag in self.tags][:4]
            if not valid_tags:
                valid_tags = ["–æ–±—â–∏–π"]
            
            return ReviewAnnotation(
                category=category,
                subcategory=subcategory,
                tags=valid_tags
            )
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return None
    
    def classify_review(self, review_text: str) -> Optional[ReviewAnnotation]:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –æ—Ç–∑—ã–≤"""
        if not self.check_ollama_status():
            return None
            
        prompt = self.create_prompt(review_text)
        response = self.query_llm(prompt)
        
        if response:
            return self.parse_response(response)
        return None
    
    def display_classification(self, review_text: str, annotation: ReviewAnnotation):
        """–ö—Ä–∞—Å–∏–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        print("=" * 60)
        print(f"üìù –û–¢–ó–´–í: {review_text}")
        print("=" * 60)
        print(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {annotation.category}")
        print(f"üìã –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {annotation.subcategory}")
        print(f"üè∑Ô∏è –¢–µ–≥–∏: {', '.join(annotation.tags)}")
        print("=" * 60)
    
    def classify_interactive(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–∑—ã–≤–∞"""
        print("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–∑—ã–≤ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–∏–ª–∏ 'quit' –¥–ª—è –≤—ã—Ö–æ–¥–∞):")
        
        while True:
            review_text = input("\nüìù –û—Ç–∑—ã–≤: ").strip()
            
            if review_text.lower() in ['quit', 'exit', '–≤—ã—Ö–æ–¥']:
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            
            if not review_text:
                print("‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–∑—ã–≤!")
                continue
            
            print("\n‚è≥ –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É—é...")
            start_time = time.time()
            
            annotation = self.classify_review(review_text)
            end_time = time.time()
            
            if annotation:
                self.display_classification(review_text, annotation)
                print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {end_time - start_time:.1f} —Å–µ–∫")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∑—ã–≤")
            
            print("\n" + "-" * 60)
    
    def classify_batch(self, reviews_list: List[str], show_progress: bool = True) -> List[Dict]:
        """–ü–∞–∫–µ—Ç–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–∑—ã–≤–æ–≤"""
        results = []
        
        if show_progress:
            print(f"üì¶ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É {len(reviews_list)} –æ—Ç–∑—ã–≤–æ–≤...")
        
        for i, review in enumerate(reviews_list, 1):
            if show_progress:
                print(f"‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {i}/{len(reviews_list)}: {review[:50]}...")
            
            annotation = self.classify_review(review)
            
            if annotation:
                result = {
                    "–æ—Ç–∑—ã–≤": review,
                    "–∫–∞—Ç–µ–≥–æ—Ä–∏—è": annotation.category,
                    "–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è": annotation.subcategory,
                    "—Ç–µ–≥–∏": annotation.tags
                }
                results.append(result)
                
                if show_progress:
                    print(f"‚úÖ {annotation.category}")
            else:
                if show_progress:
                    print("‚ùå –û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        
        return results
    
    def analyze_results(self, results: List[Dict]):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
        if not results:
            print("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
        
        df = pd.DataFrame(results)
        
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò")
        print("=" * 40)
        print(f"–í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {len(df)}")
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        print("\nüìÇ –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
        for cat, count in df['–∫–∞—Ç–µ–≥–æ—Ä–∏—è'].value_counts().items():
            print(f"  ‚Ä¢ {cat}: {count}")
        
        # –¢–æ–ø —Ç–µ–≥–æ–≤
        all_tags = []
        for tags_list in df['—Ç–µ–≥–∏']:
            all_tags.extend(tags_list)
        
        print("\nüè∑Ô∏è –¢–æ–ø-5 —Ç–µ–≥–æ–≤:")
        for tag, count in Counter(all_tags).most_common(5):
            print(f"  ‚Ä¢ {tag}: {count}")
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))
        
        # –ì—Ä–∞—Ñ–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        df['–∫–∞—Ç–µ–≥–æ—Ä–∏—è'].value_counts().plot(kind='bar', ax=ax1, color='skyblue')
        ax1.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', fontweight='bold')
        ax1.tick_params(axis='x', rotation=45)
        
        # –ì—Ä–∞—Ñ–∏–∫ —Ç–µ–≥–æ–≤
        top_tags = dict(Counter(all_tags).most_common(5))
        ax2.bar(top_tags.keys(), top_tags.values(), color='lightcoral')
        ax2.set_title('–¢–æ–ø-5 —Ç–µ–≥–æ–≤', fontweight='bold')
        ax2.tick_params(axis='x', rotation=45)
        
        plt.tight_layout()
        plt.show()
    
    def save_results(self, results: List[Dict], filename_base: str = "classified_reviews"):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª—ã"""
        if not results:
            print("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return
        
        # JSON
        json_file = f"{filename_base}.json"
        with open(json_file, 'w', encoding='utf-8') as f:
            json.dump(results, f, ensure_ascii=False, indent=2)
        
        # CSV
        df = pd.DataFrame(results)
        df['—Ç–µ–≥–∏_—Å—Ç—Ä–æ–∫–∞'] = df['—Ç–µ–≥–∏'].apply(lambda x: ', '.join(x))
        csv_file = f"{filename_base}.csv"
        df[['–æ—Ç–∑—ã–≤', '–∫–∞—Ç–µ–≥–æ—Ä–∏—è', '–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è', '—Ç–µ–≥–∏_—Å—Ç—Ä–æ–∫–∞']].to_csv(
            csv_file, index=False, encoding='utf-8'
        )
        
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")
        print(f"  ‚Ä¢ JSON: {json_file}")
        print(f"  ‚Ä¢ CSV: {csv_file}")
    
    def show_stats(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))
        
        # –ì—Ä–∞—Ñ–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        categories_df = pd.DataFrame(list(self.categories.items()), 
                                   columns=['–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'])
        categories_df = categories_df.sort_values('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', ascending=True)
        
        ax1.barh(categories_df['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'], categories_df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'])
        ax1.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', fontweight='bold')
        ax1.set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤')
        
        # –ì—Ä–∞—Ñ–∏–∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
        top_subcats = dict(Counter(self.subcategories).most_common(8))
        subcats_df = pd.DataFrame(list(top_subcats.items()), 
                                 columns=['–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'])
        subcats_df = subcats_df.sort_values('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', ascending=True)
        
        ax2.barh(subcats_df['–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è'], subcats_df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'])
        ax2.set_title('–¢–æ–ø-8 –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π', fontweight='bold')
        ax2.set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤')
        
        plt.tight_layout()
        plt.show()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üöÄ –°–ò–°–¢–ï–ú–ê –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –†–ê–ó–ú–ï–¢–ö–ò –û–¢–ó–´–í–û–í")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    classifier = JupyterReviewClassifier()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Ollama
    if not classifier.check_ollama_status():
        classifier.install_ollama_instructions()
        return
    
    # –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö:")
    classifier.show_stats()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã
    test_reviews = [
        "–ù–µ –º–æ–≥—É –≤–æ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
        "–û—Ç–ª–∏—á–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞, –≤—Å–µ –±—ã—Å—Ç—Ä–æ!",
        "–ë–æ–Ω—É—Å—ã –Ω–µ –Ω–∞—á–∏—Å–ª–∏–ª–∏—Å—å –∑–∞ –ø–æ–∫—É–ø–∫—É"
    ]
    
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –ø—Ä–∏–º–µ—Ä–∞—Ö...")
    results = classifier.classify_batch(test_reviews)
    
    if results:
        print("\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        for result in results:
            print(f"\nüìù {result['–æ—Ç–∑—ã–≤']}")
            print(f"üìÇ {result['–∫–∞—Ç–µ–≥–æ—Ä–∏—è']}")
            print(f"üìã {result['–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è']}")
            print(f"üè∑Ô∏è {', '.join(result['—Ç–µ–≥–∏'])}")
        
        # –ê–Ω–∞–ª–∏–∑ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        classifier.analyze_results(results)
        classifier.save_results(results, "test_results")
        
        print("\nüéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("\n–î–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        print("classifier.classify_interactive()")
    else:
        print("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")


if __name__ == "__main__":
    main()